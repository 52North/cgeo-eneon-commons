<?php
/*
 * Copyright (C) 2016
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 * - Apache License, version 2.0
 * - Apache Software License, version 1.0
 * - GNU Lesser General Public License, version 3
 * - Mozilla Public License, versions 1.0, 1.1 and 2.0
 * - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */

/**
 * Implements hook_enable()
 */
function eneon_enable() {
  module_load_include('inc', 'eneon', 'includes/eneon.common');
  $external_image_cache_whitelist = variable_get('imagecache_external_hosts');
  if (strpos( $external_image_cache_whitelist, ENEON_HOST) === false) {
    $external_image_cache_whitelist .= ENEON_HOST;
    variable_set('imagecache_external_hosts', $external_image_cache_whitelist);
  }
//   eneon_install(); // debug: comment in and enable module via UI
  eneon_update_networks();
}
/**
 * Implements hook_disable)
 */
function eneon_disable() {
  module_load_include('inc', 'eneon', 'includes/eneon.common');
  $external_image_cache_whitelist = variable_get('imagecache_external_hosts');
  if (strpos( $external_image_cache_whitelist, ENEON_HOST) !== false) {
    $external_image_cache_whitelist =  str_replace($external_image_cache_whitelist, ENEON_HOST, '');
    variable_set('imagecache_external_hosts', $external_image_cache_whitelist);
  }
//   eneon_uninstall(); // debug: comment in and enable module via UI
}
/**
 * Implements hook_install()
 */
function eneon_install() {
//   node_types_rebuild();
//   $types = node_type_get_types();
//   node_add_body_field($types[ENEON_BUNDLE_ISSUE]);

  _eneon_create_vocabularies();
  _eneon_create_fields(ENEON_BUNDLE_NETWORK, _eneon_network_field_infos());
  _eneon_create_fields(ENEON_BUNDLE_ISSUE, _eneon_issue_field_infos());
  module_invoke('eneon', 'entity_property_info');

  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types[ENEON_BUNDLE_ISSUE]);
  node_type_save($types[ENEON_BUNDLE_ISSUE]);

  $permissions = array(
      'create ' . ENEON_BUNDLE_ISSUE .' content',
      'edit own ' . ENEON_BUNDLE_ISSUE .' content',
  );

//   user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('permission name')); // Anonymous users
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions); // Authentificated users

}

function _eneon_create_vocabularies() {
  $sba_vocab = (object) array(
      'name' => 'SBA vocabulary',
      'description' => 'Societal Benefit Areas Vocabulary',
      'machine_name' => ENEON_VOCAB_BUNDLE_SBA,
  );
  taxonomy_vocabulary_save($sba_vocab);

  $theme_vocab = (object) array(
      'name' => 'Theme vocabulary',
      'description' => 'Themes Vocabulary',
      'machine_name' => ENEON_VOCAB_BUNDLE_THEME,
  );
  taxonomy_vocabulary_save($theme_vocab);
}

function _eneon_network_field_infos() {
  $infos = array();

  $infos['fields'] = array(
      ENEON_NETWORK_ID => array(
          'field_name' => ENEON_NETWORK_ID,
          'type' => 'text',
          'translatable' => FALSE,
      ),
      ENEON_NETWORK_TYPE => array(
          'field_name' => ENEON_NETWORK_TYPE,
          'type' => 'text',
          'translatable' => FALSE,
      ),
      ENEON_NETWORK_DESCRIPTION => array(
          'field_name' => ENEON_NETWORK_DESCRIPTION,
          'type' => 'text_long',
          'translatable' => TRUE,
      ),
      ENEON_NETWORK_URL => array(
          'field_name' => ENEON_NETWORK_URL,
          'type' => 'link_field',
          'translatable' => FALSE,
      ),
      ENEON_NETWORK_LOGO_URL => array(
          'field_name' => ENEON_NETWORK_LOGO_URL,
          'type' => 'text',
          'translatable' => FALSE,
      ),
      ENEON_NETWORK_SBA_REFERENCE => array(
        'field_name' => ENEON_NETWORK_SBA_REFERENCE,
        'type' => 'taxonomy_term_reference',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'translatable' => TRUE,
      ),
      ENEON_NETWORK_THEME_REFERENCE => array(
          'field_name' => ENEON_NETWORK_THEME_REFERENCE,
          'type' => 'taxonomy_term_reference',
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'translatable' => TRUE,
      ),
  );
  $infos['instances'] = array(
      ENEON_NETWORK_ID => array(
          'field_name' => ENEON_NETWORK_ID,
          'label' => t('ENEON Network ID'),
          'required' => TRUE,
      ),
      ENEON_NETWORK_TYPE => array(
          'field_name' => ENEON_NETWORK_TYPE,
          'label' => t('ENEON Network Type'),
          'required' => TRUE,
      ),
      ENEON_NETWORK_DESCRIPTION => array(
          'field_name' => ENEON_NETWORK_DESCRIPTION,
          'label' => t('Description'),
          'required' => TRUE,
          'display' => array(
              'teaser' => array( 'type' => 'text_default'),
          ),
      ),
      ENEON_NETWORK_URL => array(
          'field_name' => ENEON_NETWORK_URL,
          'label' => t('Network URL'),
          'required' => FALSE,
      ),
      ENEON_NETWORK_LOGO_URL => array(
          'field_name' => ENEON_NETWORK_LOGO_URL,
          'label' => t('Network Logo URL'),
          'required' => FALSE,
      ),
      ENEON_NETWORK_SBA_REFERENCE => array(
          'field_name' => ENEON_NETWORK_SBA_REFERENCE,
          'label' => t('Reference to SBAs'),
          'required' => FALSE,
      ),
      ENEON_NETWORK_THEME_REFERENCE => array(
          'field_name' => ENEON_NETWORK_THEME_REFERENCE,
          'label' => t('Reference to Themes'),
          'required' => FALSE,
      ),
  );

  return $infos;
}

function _eneon_issue_field_infos() {
  $infos = array();

  $infos['fields'] = array(
      ENEON_ISSUE_DESCRIPTION => array(
          'field_name' => ENEON_ISSUE_DESCRIPTION,
          'type' => 'text_long',
          'translatable' => TRUE,
          'display' => array(
              'teaser' => array( 'type' => 'text_default'),
          )
      ),
      ENEON_ISSUE_SELECTED_SBAS => array(
          'field_name' => ENEON_ISSUE_SELECTED_SBAS,
          'type' => 'taxonomy_term_reference',
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'settings' => array(
            'allowed_values' => array(
                0 => array(
                  'vocabulary' => ENEON_VOCAB_BUNDLE_SBA,
                  'parent' => 0,
              ),
            ),
          ),
          'widget' => array(
              'type' => 'options_select'
          ),
      ),
      ENEON_ISSUE_SELECTED_THEMES => array(
          'field_name' => ENEON_ISSUE_SELECTED_THEMES,
          'type' => 'taxonomy_term_reference',
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'settings' => array(
              'allowed_values' => array(
                  0 => array(
                      'vocabulary' => ENEON_VOCAB_BUNDLE_THEME,
                      'parent' => 0,
                  ),
              ),
          ),
          'widget' => array(
              'type' => 'options_select'
          ),
      ),
      ENEON_ISSUE_SELECTED_NETWORKS => array(
          'field_name' => ENEON_ISSUE_SELECTED_NETWORKS,
          'type' => 'entityreference',
          'settings' => array(
              'target_type' => 'node', // XXX any node is possible here
          ),
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'widget' => array(
              'type' => 'link_field',
          ),
      ),
  );
  $infos['instances'] = array(
      ENEON_ISSUE_DESCRIPTION => array(
          'field_name' => ENEON_ISSUE_DESCRIPTION,
          'label' => t('Description'),
          'required' => TRUE,
      ),
      ENEON_ISSUE_SELECTED_SBAS => array(
          'field_name' => ENEON_ISSUE_SELECTED_SBAS,
          'label' => t('Selected SBAs'),
          'required' => FALSE,
      ),
      ENEON_ISSUE_SELECTED_THEMES => array(
          'field_name' => ENEON_ISSUE_SELECTED_THEMES,
          'label' => t('Selected Themes'),
          'required' => FALSE,
      ),
      ENEON_ISSUE_SELECTED_NETWORKS => array(
          'field_name' => ENEON_ISSUE_SELECTED_NETWORKS,
          'label' => t('Selected Networks'),
          'required' => FALSE,
      ),
  );

  return $infos;
}

function _eneon_create_fields($bundle, $fields=array()) {
  if (isset($bundle)) {
    foreach ($fields['fields'] as $field) {
      field_create_field($field);
    }
    foreach ($fields['instances'] as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = $bundle;
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function eneon_uninstall() {
  _eneon_delete_vocabulary(ENEON_VOCAB_BUNDLE_SBA);
  _eneon_delete_vocabulary(ENEON_VOCAB_BUNDLE_THEME);

  _eneon_delete_node_content(ENEON_BUNDLE_NETWORK, _eneon_network_field_infos());
  _eneon_delete_node_content(ENEON_BUNDLE_ISSUE, _eneon_issue_field_infos());
}

function _eneon_delete_vocabulary($vocab) {
  if (isset($vocab)) {
    $vocab = taxonomy_vocabulary_machine_name_load($vocab);
    if ($vocab) {
      taxonomy_vocabulary_delete($vocab->vid);
    }
  }
}

function _eneon_delete_node_content($node_type, $field_infos) {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $results = db_query($sql, array(':type' => $node_type))->fetchCol();
  node_delete_multiple($results);

  $instances = field_info_instances('node', $node_type);
  foreach ($instances as $instance_name => $field_instance) {
//     drupal_set_message(t('"eneon" module: delete field instance @instance', array('@instance' => $instance_name)));
    field_delete_instance($field_instance);
  }

  foreach (array_keys($field_infos['fields']) as $field_name) {
//     drupal_set_message(t('"eneon" module: delete field @field', array('@field' => $field_name)));
    field_delete_field($field_name);
  }

  node_type_delete($node_type);
}
