<?php
/*
 * Copyright (C) 2016
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 * - Apache License, version 2.0
 * - Apache Software License, version 1.0
 * - GNU Lesser General Public License, version 3
 * - Mozilla Public License, versions 1.0, 1.1 and 2.0
 * - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */

/**
 * Implements hook_enable()
 */
function eneon_enable() {
//   eneon_install(); // debug: comment in and enable module via UI
  module_load_include('inc', 'eneon', 'includes/eneon.common');
  eneon_update_networks();
}
/**
 * Implements hook_disable)
 */
function eneon_disable() {
//   eneon_uninstall(); // debug: comment in and enable module via UI
}
/**
 * Implements hook_install()
 */
function eneon_install() {
  _eneon_create_vocabularies();
  _eneon_create_fields(ENEON_ENTITY_NETWORK, _eneon_network_field_infos());
  _eneon_create_fields(ENEON_ENTITY_ISSUE, _eneon_issue_field_infos());
}

function _eneon_create_vocabularies() {
  $sba_vocab = (object) array(
      'name' => 'SBA vocabulary',
      'description' => 'Societal Benefit Areas Vocabulary',
      'machine_name' => ENEON_VOCAB_BUNDLE_SBA,
  );
  taxonomy_vocabulary_save($sba_vocab);

  $theme_vocab = (object) array(
      'name' => 'Theme vocabulary',
      'description' => 'Themes Vocabulary',
      'machine_name' => ENEON_VOCAB_BUNDLE_THEME,
  );
  taxonomy_vocabulary_save($theme_vocab);
}

function _eneon_network_field_infos() {
  $infos = array();

  $infos['fields'] = array(
      ENEON_NETWORK_SBA_REFERENCE => array(
          'field_name' => ENEON_NETWORK_SBA_REFERENCE,
          'type' => 'taxonomy_term_reference',
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'translatable' => FALSE,
      ),
      ENEON_NETWORK_THEME_REFERENCE => array(
          'field_name' => ENEON_NETWORK_THEME_REFERENCE,
          'type' => 'taxonomy_term_reference',
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
          'translatable' => FALSE,
      ),
  );
  $infos['instances'] = array(
      ENEON_NETWORK_SBA_REFERENCE => array(
          'field_name' => ENEON_NETWORK_SBA_REFERENCE,
          'label' => t('Reference to SBAs'),
          'required' => FALSE,
      ),
      ENEON_NETWORK_THEME_REFERENCE => array(
          'field_name' => ENEON_NETWORK_THEME_REFERENCE,
          'label' => t('Reference to Themes'),
          'required' => FALSE,
      ),
  );

  return $infos;
}

function _eneon_issue_field_infos() {
  $infos = array();

  $infos['fields'] = array(
      ENEON_ISSUE_SELECTED_SBAS => array(
          'field_name' => ENEON_ISSUE_SELECTED_SBAS,
          'type' => 'taxonomy_term_reference',
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      ),
      ENEON_ISSUE_SELECTED_THEMES => array(
          'field_name' => ENEON_ISSUE_SELECTED_THEMES,
          'type' => 'taxonomy_term_reference',
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      ),
      ENEON_ISSUE_SELECTED_NETWORKS => array(
          'field_name' => ENEON_ISSUE_SELECTED_NETWORKS,
          'type' => 'entityreference',
          'settings' => array(
              'target_type' => ENEON_ENTITY_NETWORK,
          ),
          'translatable' => FALSE,
          'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      ),
  );
  $infos['instances'] = array(
      ENEON_ISSUE_SELECTED_SBAS => array(
          'field_name' => ENEON_ISSUE_SELECTED_SBAS,
          'label' => t('Selected SBAs'),
          'required' => FALSE,
      ),
      ENEON_ISSUE_SELECTED_THEMES => array(
          'field_name' => ENEON_ISSUE_SELECTED_THEMES,
          'label' => t('Selected Themes'),
          'required' => FALSE,
      ),
      ENEON_ISSUE_SELECTED_NETWORKS => array(
          'field_name' => ENEON_ISSUE_SELECTED_NETWORKS,
          'label' => t('Selected Networks'),
          'required' => FALSE,
      ),
  );

  return $infos;
}

function _eneon_create_fields($entity_type, $fields=array()) {
  if (isset($entity_type)) {
    foreach ($fields['fields'] as $field) {
      field_create_field($field);
    }
    foreach ($fields['instances'] as $instance) {
      $instance['entity_type'] = $entity_type;
      $instance['bundle'] = $entity_type;
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function eneon_uninstall() {
  eneon_delete_vocabulary(ENEON_VOCAB_BUNDLE_SBA);
  eneon_delete_vocabulary(ENEON_VOCAB_BUNDLE_THEME);

  _eneon_delete_fields(ENEON_ENTITY_NETWORK, _eneon_network_field_infos());
  _eneon_delete_fields(ENEON_ENTITY_ISSUE, _eneon_issue_field_infos());
}

function eneon_delete_vocabulary($vocab) {
  if (isset($vocab)) {
    $vocab = taxonomy_vocabulary_machine_name_load($vocab);
    if ($vocab) {
      taxonomy_vocabulary_delete($vocab->vid);
    }
  }
}

function _eneon_delete_fields($entity_type, $field_infos) {
  $instances = field_info_instances($entity_type, $entity_type);
  foreach ($instances as $instance_name => $field_instance) {
//     drupal_set_message(t('"eneon" module: delete field instance @instance', array('@instance' => $instance_name)));
    field_delete_instance($field_instance);
  }

  foreach (array_keys($field_infos['fields']) as $field_name) {
//     drupal_set_message(t('"eneon" module: delete field @field', array('@field' => $field_name)));
    field_delete_field($field_name);
  }
}

/**
 * Implements hook_schema().
 */
function eneon_schema() {
  $schema = array ();

  $schema [ENEON_TABLE_ISSUES] = array (
      'description' => 'The base table for the ENEON issue entity',
      'fields' => array (
          'id' => array (
              'description' => 'Primary key.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'title' => array (
              'description' => 'Issue title.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
          'description' => array (
              'description' => 'Issue description',
              'type' => 'text',
              'size' => 'medium',
              'not null' => FALSE,
          ),
      ),
      'primary key' => array (
          'id',
      ),
  );

  $schema [ENEON_TABLE_NETWORKS] = array (
      'description' => 'The base table for the ENEON network entity',
      'fields' => array (
          'id' => array (
              'description' => 'Primary key.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'nid' => array (
              'description' => 'Network id.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
          'title' => array (
              'description' => 'Network title.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
          'type' => array (
              'description' => 'Network type.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => FALSE,
          ),
          'description' => array (
              'description' => 'Network description',
              'type' => 'text',
              'size' => 'medium',
              'not null' => FALSE,
          ),
          'url' => array (
              'description' => 'Network URL',
              'type' => 'text',
              'size' => 'medium',
              'not null' => FALSE,
          ),
          'logo_url' => array (
              'description' => 'Network logo',
              'type' => 'text',
              'size' => 'medium',
              'not null' => FALSE,
          ),
      ),
      'primary key' => array (
          'id',
      ),
  );
  return $schema;
}
