<?php
/*
 * Copyright (C) 2016
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a "derivative work" of the program:
 *
 * - Apache License, version 2.0
 * - Apache Software License, version 1.0
 * - GNU Lesser General Public License, version 3
 * - Mozilla Public License, versions 1.0, 1.1 and 2.0
 * - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public
 * License version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 */

require_once 'eneon.info.inc';
require_once 'eneon.issue.wizard.inc';

define('ENEON_VOCAB_BUNDLE_SBA', 'eneon_vocab_sba');
define('ENEON_VOCAB_BUNDLE_THEME', 'eneon_vocab_theme');
define('ENEON_BUNDLE_NETWORK', 'eneon_network');
define('ENEON_BUNDLE_ISSUE', 'eneon_issue');

/*
 * FIELD CONSTANTS
 */

// issue fields
define('ENEON_ISSUE_DESCRIPTION', 'eneon_issue_description');
define('ENEON_ISSUE_SELECTED_SBAS', 'eneon_selected_sbas');
define('ENEON_ISSUE_SELECTED_THEMES', 'eneon_selected_themes');
define('ENEON_ISSUE_SELECTED_NETWORKS', 'eneon_selected_networks');

// network fields
define('ENEON_NETWORK_ID', 'eneon_network_id');
define('ENEON_NETWORK_TYPE', 'eneon_network_type');
define('ENEON_NETWORK_DESCRIPTION', 'eneon_network_description');
define('ENEON_NETWORK_URL', 'eneon_network_url');
define('ENEON_NETWORK_LOGO_URL', 'eneon_network_logo_url');
define('ENEON_NETWORK_SBA_REFERENCE', 'eneon_network_sba_ref');
define('ENEON_NETWORK_THEME_REFERENCE', 'eneon_network_theme_ref');

/**
 * Implements hook_menu()
 */
function eneon_menu() {
  // https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7.x#sub_autoload_wildcards
  $autoload_network_modal_wildcard = 'eneon/%ctools_js/%';

  $items['issues'] = array(
      'title' => t('Issues'),
      'page callback' => 'eneon_view_issue_list',
      'access callback' => TRUE,
      'file' => 'eneon.pages.inc',
  );
  $items['issues/add'] = array(
      'title' => t('Add issue'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('eneon_issue_wizard'),
      'access arguments' => array('create ' . ENEON_BUNDLE_ISSUE . ' content'),
      'file' => 'eneon.issue.wizard.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['issues/edit/%'] = array(
      'title' => 'Edit issue',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('access content'),
      'page arguments' => array('eneon_issue_wizard', 2),
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'eneon.issue.wizard.inc',
  );

  $items['networks'] = array(
      'title' => t('Networks'),
      'page callback' => 'eneon_view_network_list',
      'access callback' => TRUE,
      'file' => 'eneon.pages.inc',
  );

  $items[$autoload_network_modal_wildcard] = array(
      'title' => t('Network Details'),
      'page arguments' => array(1, 2),
      'page callback' => 'eneon_view_network_modal',
      'access callback' => TRUE,
      'file' => 'eneon.pages.inc',
  );
  return $items;
}

function eneon_node_view($node, $view_mode, $langcode) {
  $tmp = array();
  if ($node->type === ENEON_BUNDLE_NETWORK && $view_mode === 'full') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $logo_url = $wrapper->{ENEON_NETWORK_LOGO_URL}->value();
    $sbas = $wrapper->{ENEON_NETWORK_SBA_REFERENCE}->value();
    $themes = $wrapper->{ENEON_NETWORK_THEME_REFERENCE}->value();
    $type = $wrapper->{ENEON_NETWORK_TYPE}->value();
    $url = $wrapper->{ENEON_NETWORK_URL}->value();
    $title = $wrapper->title->value();

    if (!empty($logo_url)) {
      $image_markup = theme('imagecache_external', array(
          'path' => $logo_url,
          'style_name' => 'thumbnail',
          'title' => $wrapper->title->value(),
          'alt' => $title,
      ));
      $node->content[ENEON_NETWORK_LOGO_URL] = array(
          '#type' => 'markup',
          '#prefix' => '<div>',
          '#suffix' => '</div>',
          '#markup' => $image_markup,
          '#weigth' => 0,
      );
    }

    $node->content[ENEON_NETWORK_SBA_REFERENCE] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="field"><label>' . t('Related SBAs') . '</label>',
        '#suffix' => '</div>',
        '#markup' => _eneon_render_tax_items($sbas),
        '#weight' => 10,
    );
    $node->content[ENEON_NETWORK_THEME_REFERENCE] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="field"><label>' . t('Related Themes') . '</label>',
        '#suffix' => '</div>',
        '#markup' => _eneon_render_tax_items($themes),
        '#weight' => 9,
    );
  } elseif ($node->type === ENEON_BUNDLE_ISSUE && $view_mode === 'full') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $sbas = $wrapper->{ENEON_ISSUE_SELECTED_SBAS}->value();
    $themes = $wrapper->{ENEON_ISSUE_SELECTED_THEMES}->value();

    $node->content[ENEON_ISSUE_SELECTED_SBAS] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="field"><label>' . t('Selected SBAs') . '</label>',
        '#suffix' => '</div>',
        '#markup' => _eneon_render_tax_items($sbas),
    );
    $node->content[ENEON_ISSUE_SELECTED_THEMES] = array(
        '#type' => 'markup',
        '#prefix' => '<div class="field"><label>' . t('Selected Themes') . '</label>',
        '#suffix' => '</div>',
        '#markup' => _eneon_render_tax_items($themes),
    );
  }
}

/**
 * Implements hook_node_info().
 */
function eneon_node_info() {
  return array (
      ENEON_BUNDLE_ISSUE => array (
          'name' => t('ENEON Issue'),
          'base' => ENEON_BUNDLE_ISSUE,
          'description' => t('An ENEON Issue'),
          'has_title' => TRUE,
          'title_label' => t('Issue'),
//           'locked' => TRUE,
      ),

      ENEON_BUNDLE_NETWORK => array (
          'name' => t('ENEON Network'),
          'base' => ENEON_BUNDLE_NETWORK,
          'description' => t('An ENEON Network'),
          'has_title' => TRUE,
          'title_label' => t('Network'),
//           'locked' => TRUE,
      )
  );
}

///**
// * Implements hook_cron()
// */
// function eneon_cron() {
// // regularly download and update graph
// eneon_update_networks();
// }


